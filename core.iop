/**************************************************************************/
/*                                                                        */
/*  Copyright (C) 2004-2019 INTERSEC SA                                   */
/*                                                                        */
/*  Should you receive a copy of this source code, you must check you     */
/*  have a proper, written authorization of INTERSEC to hold it. If you   */
/*  don't have such an authorization, you must DELETE all source code     */
/*  files in your possession, and inform INTERSEC of the fact you obtain  */
/*  these files. Should you not comply to these terms, you can be         */
/*  prosecuted in the extent permitted by applicable law.                 */
/*                                                                        */
/**************************************************************************/

package core;

/** List of supported log levels.
 */
enum LogLevel {
    EMERG   = 0, /**< system is unusable */
    ALERT   = 1, /**< action must be taken immediately */
    CRIT    = 2, /**< critical conditions */
    ERR     = 3, /**< error conditions */
    WARNING = 4, /**< warning conditions */
    NOTICE  = 5, /**< normal but significant condition */
    INFO    = 6, /**< informational */
    DEBUG   = 7, /**< debug-level messages */
    TRACE   = 8, /**< trace-level messages */

    INHERITS = -1, /**< inherits the level of the parent logger */
    DEFAULT  = -2, /**< use default configuration */
};

/** Configuration of a specific logger.
 */
struct LoggerConfiguration {
    /** Name of the logger to configure.
     */
    @minLength(1)
    string fullName;

    /** Logging level.
     *
     * This will be the logging level for this logger and all inheriting
     * loggers that were not explicitly configured.
     */
    LogLevel level;

    /** Force the use of logging level for child loggers.
     *
     * If this flag is set, the level of that logger is propagated to all
     * child loggers that were not explicitly configured, even those that
     * were not supposed to inherit from that level.
     */
    bool forceAll = false;
};

/** Interface providing the basis for configuring the logging system.
 */
interface Log {
    setRootLevel
        in (LogLevel level, bool forceAll = false)
        out (LogLevel level);

    resetRootLevel
        in void
        out (LogLevel level);

    setLoggerLevel
        in (string fullName, LogLevel level, bool forceAll = false)
        out (LogLevel level);

    resetLoggerLevel
        in (string fullName)
        out (LogLevel level);
};

/** Configuration of the logging system.
 */
struct LogConfiguration {
    /** Root logging level.
     *
     * This will be the logging level for all the logger inherits from
     * root logging level and that were not configured to another value
     * separately.
     *
     * The default configuration is to enable TRACE in development builds,
     * and to enable only DEBUG in release builds.
     */
    LogLevel rootLevel = LOG_LEVEL_DEFAULT;

    /** Force the use of the root level.
     *
     * If this flag is set, the root level is propagated to all logger
     * that were not explicitly configured, even those that were not
     * supposed to inherit from the root level.
     */
    bool     forceAll = false;

    /** Independent configuration of specific loggers.
     *
     * This can be used to perform a fine-grained configuration of the
     * logging level of specific code modules.
     */
    LoggerConfiguration[] specific;
};

/** Configuration of a log_file_t.
 *
 * This class defines how a log_file_t is opened.
 */
class LogFileConfiguration {
    /** Log file max size before rotation (in bytes) */
    int maxSize       = 512M;
    /** Log file max age before rotation (in seconds) */
    ulong maxTime     = 1d;
    /** Maximum number of log files - <= 0 means no limit */
    int maxFiles      = 0;
    /** Maximum total size of the log files (in bytes)
      * <= 0 means no limit */
    long totalMaxSize = 1G;
    /** Activate log file compression */
    bool compress     = true;
};

/** Product licence.
 *
 * This class provides the base for a product licence format.
 */
class Licence {
    /** Expiration date of the licence.
     */
    @minLength(11) @maxLength(11) @pattern("[a-zA-Z0-9\-]*")
    string expires = "31-dec-2035";

    /** Licencee identification.
     */
    string registeredTo;

    /** Version of the product licenced.
     */
    string version;

    /** If true, the licencee is allowed to use the product for
     * production.
     */
    bool   productionUse;

    /** Hardware limitation: CPU.
     */
    long[]   cpuSignatures;

    /** Hardware limitation: MAC Address.
     */
    string[] macAddresses;
};

/** Signed licence.
 */
struct SignedLicence {
    /** The licence structure.
     */
    Licence licence;

    /** The signature of the previously defined licence.
     */
    string signature;
};

struct HttpdCfg {
    /** Address (host:port) to listen on */
    string  bindAddr;
    /** Maximum size of the output buffer (in octets) */
    uint    outbufMaxSize    = 32 << 20;
    /** Maximum number of pending incoming queries */
    ushort  pipelineDepth    = 32;
    /** Maximum time of inactivity before connection closing (in ms) */
    uint    noactDelay       = 30 * 1000;
    /** Maximum number of incoming queries handled into a connection life */
    uint    maxQueries       = 1024;
    /** Maximum number of inbound connections */
    uint    maxConnsIn       = 1000;
    /** Amount of data buffered by the body parser before flushing */
    uint    onDataThreshold  = 16 << 10;
    /** Maximum line length in headers */
    uint    headerLineMax    = 1024;
    /** Maximum total size for headers */
    uint    headerSizeMax    = 64 << 10;
};

struct HttpcCfg {
    /** Maximum number of pending outgoing queries */
    ushort  pipelineDepth    = 32;
    /** Maximum time of inactivity before connection closing (in ms) */
    uint    noactDelay       = 30 * 1000;
    /** Maximum number of outgoing queries handled into a connection life */
    uint    maxQueries       = 1024;
    /** Amount of data buffered by the body parser before flushing */
    uint    onDataThreshold  = 16 << 10;
    /** Maximum line length in headers */
    uint    headerLineMax    = 1024;
    /** Maximum total size for headers */
    uint    headerSizeMax    = 64 << 10;
};

enum IopHttpMethod {
    /* rfc 2616: ยง5.1.1: Method */
    /* XXX be careful, this struct is correlated with http_method_t
    in http.h */
    OPTIONS = 0,
    GET     = 1,
    HEAD    = 2,
    POST    = 3,
    PUT     = 4,
    DELETE  = 5,
    TRACE   = 6,
    CONNECT = 7,
};


/** Module exporting interfaces provided by lib-common.
 */
module Core {
16384:
    Log log;
};
