/**************************************************************************/
/*                                                                        */
/*  Copyright (C) 2004-2018 INTERSEC SA                                   */
/*                                                                        */
/*  Should you receive a copy of this source code, you must check you     */
/*  have a proper, written authorization of INTERSEC to hold it. If you   */
/*  don't have such an authorization, you must DELETE all source code     */
/*  files in your possession, and inform INTERSEC of the fact you obtain  */
/*  these files. Should you not comply to these terms, you can be         */
/*  prosecuted in the extent permitted by applicable law.                 */
/*                                                                        */
/**************************************************************************/

package core;

/** List of supported log levels.
 */
enum LogLevel {
    EMERG   = 0, /**< system is unusable */
    ALERT   = 1, /**< action must be taken immediately */
    CRIT    = 2, /**< critical conditions */
    ERR     = 3, /**< error conditions */
    WARNING = 4, /**< warning conditions */
    NOTICE  = 5, /**< normal but significant condition */
    INFO    = 6, /**< informational */
    DEBUG   = 7, /**< debug-level messages */
    TRACE   = 8, /**< trace-level messages */

    INHERITS = -1, /**< inherits the level of the parent logger */
    DEFAULT  = -2, /**< use default configuration */
};

/** Configuration of a specific logger.
 */
struct LoggerConfiguration {
    /** Name of the logger to configure.
     */
    string fullName;

    /** Logging level.
     *
     * This will be the logging level for this logger and all inheriting
     * loggers that were not explicitly configured.
     */
    LogLevel level;

    /** Force the use of logging level for child loggers.
     *
     * If this flag is set, the level of that logger is propagated to all
     * child loggers that were not explicitly configured, even those that
     * were not supposed to inherit from that level.
     */
    bool forceAll = false;

    /** If true, log handler is called, but default one does nothing. */
    bool isSilent = false;
};

/** Interface providing the basis for configuring and accessing
 *  the logging system.
 */
interface Log {
    setRootLevel
        in (LogLevel level, bool forceAll = false, bool isSilent = false)
        out (LogLevel level);

    resetRootLevel
        in void
        out (LogLevel level);

    setLoggerLevel
        in (string fullName, LogLevel level, bool forceAll = false,
            bool isSilent = false)
        out (LogLevel level);

    resetLoggerLevel
        in (string fullName)
        out (LogLevel level);

    listLoggers
        in (string? prefix)
        out (LoggerConfiguration[] loggers);
};

/** Configuration of the logging system.
 */
struct LogConfiguration {
    /** Root logging level.
     *
     * This will be the logging level for all the logger inherits from
     * root logging level and that were not configured to another value
     * separately.
     *
     * The default configuration is to enable TRACE in development builds,
     * and to enable only DEBUG in release builds.
     */
    LogLevel rootLevel = LOG_LEVEL_DEFAULT;

    /** Force the use of the root level.
     *
     * If this flag is set, the root level is propagated to all logger
     * that were not explicitly configured, even those that were not
     * supposed to inherit from the root level.
     */
    bool     forceAll = false;

    /** If true, log handler is called, but default one does nothing. */
    bool     isSilent = false;

    /** Independent configuration of specific loggers.
     *
     * This can be used to perform a fine-grained configuration of the
     * logging level of specific code modules.
     */
    LoggerConfiguration[] specific;
};

/** Configuration of a log_file_t.
 *
 * This class defines how a log file is opened, rotates, expires and is
 * compressed.
 */
class LogFileConfiguration {
    /** Log file max size before rotation (in bytes). */
    int maxSize = 512M;

    /** Log file max age before rotation (in seconds). */
    ulong maxTime = 1d;

    /** Maximum number of log files.
     *
     * <= 0 means no limit.
     */
    int maxFiles = 0;

    /** Maximum total size of the log files (in bytes).
     *
     * <= 0 means no limit.
     */
    long totalMaxSize = 1G;

    /** Activate log file compression. */
    bool compress = true;
};

/** Expiration date.
  *
  * formatted as DD-MMM-YYYY.
  * @example "31-dec-2035"
  */
@length(11) @pattern("[a-zA-Z0-9\-]*")
typedef string ExpirationDate;

/** Licence module.
 *
 * This class provides the base for a licence module format.
 */
abstract class LicenceModule {
    /** Could be displayed on the GUI for example. */
    static string name;

    /** If false, no expiration date can be set. */
    static bool canExpire;

    /** Expiration date of the licence module.
     *
     * After that date the module will stop.
     */
    @(licence:label, en = "Expiration date"
                   , fr = "Date d\'expiration")
    ExpirationDate? expirationDate;

    /** Delay to emit warning before expiration.
     * The module will start emitting warnings from
     * \ref expirationDate - \ref expirationWarningDelay. Value is in seconds.
     */
    @(licence:label, en = "Expiration warning delay"
                   , fr = "Délai d\'avertissement d\'expiration")
    uint expirationWarningDelay = 15d;
};

/** Product licence.
 *
 * This class provides the base for a product licence format.
 */
class Licence {
    /** Expiration date of the licence.
     *
     * After that date the product could be used until \ref expirationHardDate
     * but it will emit errors.
     */
    @(licence:label, en = "Expiration date"
                   , fr = "Date d\'expiration")
    ExpirationDate expirationDate = "31-dec-2035";

    /** Real expiration date of the licence.
     *
     * After that date the product will be disabled.
     * If not provided, the default value is \ref expirationDate.
     */
    @(licence:label, en = "Real expiration date"
                   , fr = "Date réelle d\'expiration")
    ExpirationDate? expirationHardDate;

    /** Delay to emit warnings before expiration.
     *
     * The product will start emitting warnings from
     * \ref expirationDate - \ref expirationWarningDelay. Value is in seconds.
     */
    @(licence:label, en = "Expiration warning delay"
                   , fr = "Délai d\'avertissement d\'expiration")
    uint expirationWarningDelay = 15d;

    /** Licencee identification.
     */
    @(licence:label, en = "Registered to"
                   , fr = "Attribuée à")
    string registeredTo;

    /** Version of the product licenced.
     */
    @(licence:label, en = "Version"
                   , fr = "Version")
    string version;

    /** If true, the licencee is allowed to use the product for
     * production.
     */
    @(licence:label, en = "Production use"
                   , fr = "Usage en production")
    bool   productionUse;

    /** Hardware limitation: CPU.
     */
    @(licence:label, en = "CPU signatures"
                   , fr = "Signatures CPU")
    long[]   cpuSignatures;

    /** Hardware limitation: MAC Address.
     */
    @(licence:label, en = "MAC addresses"
                   , fr = "Addresses MAC")
    string[] macAddresses;

    /** Array containing a licence for each module. */
    @(licence:label, en = "Modules"
                   , fr = "Modules")
    LicenceModule[] modules;

    /** Date at which the licence was signed. */
    /* Thanks to this attribute, the iop-sign tool will automatically set this
     * field before signing a licence. */
    @(iopSign:signatureTs, true)
    long? signatureTs;
};

/** Activation token.
 *
 * An activation token is a small string which allows the product to
 * work for a short time (for example 30 days).
 *
 * The activation token has three constraints:
 *   - it must specify an expiration date for the product,
 *   - it must expire itself after some date (and can't be used anymore),
 *   - it must depend on the licence.
 */
struct ActivationToken {
    /** Product expiration: the licence will no longer be active after
     *  this date.
     */
    ExpirationDate? expirationDate;

    /** The activation token.
     */
    string token;
};

/** Signed licence.
 */
struct SignedLicence {
    /** The licence structure.
     */
    Licence licence;

    /** The signature of the previously defined licence.
     */
    string signature;

    /** The associated activation token */
    ActivationToken? activationToken;
};

/** Full address.
 *
 * Addresses can be of the following forms:
 *
 * - "a.b.c.d:port": must be a valid ipv4 IP address.
 * - "[ipv6addr]:port": must be a valid ipv6 IP address.
 * - "fqdn.tld:port": must be a valid fully qualified domain name.
 *
 * The port must be strictly positive.
 */
@nonEmpty @(cfg:fullAddr, true)
typedef string FullAddr;

/** Address.
 *
 * Same as \ref FullAddr except that the port can be omitted.
 */
@nonEmpty @(cfg:addr, true)
typedef string Addr;

struct HttpdCfg {
    /** Address (host:port) to listen on */
    FullAddr bindAddr;
    /** Maximum size of the output buffer (in octets) */
    uint    outbufMaxSize    = 32 << 20;
    /** Maximum number of pending incoming queries */
    ushort  pipelineDepth    = 32;
    /** Maximum time of inactivity before connection closing (in ms) */
    uint    noactDelay       = 30 * 1000;
    /** Maximum number of incoming queries handled into a connection life */
    uint    maxQueries       = 1024;
    /** Maximum number of inbound connections */
    uint    maxConnsIn       = 1000;
    /** Amount of data buffered by the body parser before flushing */
    uint    onDataThreshold  = 16 << 10;
    /** Maximum line length in headers */
    uint    headerLineMax    = 1024;
    /** Maximum total size for headers */
    uint    headerSizeMax    = 64 << 10;
};

struct HttpcCfg {
    /** Maximum number of pending outgoing queries */
    ushort  pipelineDepth    = 32;
    /** Maximum time of inactivity before connection closing (in ms) */
    uint    noactDelay       = 30 * 1000;
    /** Maximum number of outgoing queries handled into a connection life */
    uint    maxQueries       = 1024;
    /** Amount of data buffered by the body parser before flushing */
    uint    onDataThreshold  = 16 << 10;
    /** Maximum line length in headers */
    uint    headerLineMax    = 1024;
    /** Maximum total size for headers */
    uint    headerSizeMax    = 64 << 10;
};

enum IopHttpMethod {
    /* rfc 2616: §5.1.1: Method */
    /* XXX be careful, this struct is correlated with http_method_t
    in http.h */
    OPTIONS = 0,
    GET     = 1,
    HEAD    = 2,
    POST    = 3,
    PUT     = 4,
    DELETE  = 5,
    TRACE   = 6,
    CONNECT = 7,
};

/** Sub-file (un)packed with the IOP-Json @include feature. */
@ctype(iop_json_subfile__t)
struct IopJsonSubfile {
    /** Path to the (un)packed json.
     *
     * On unpack, the returned path is relative to the main file.
     * On pack, the path can be either absolute or relative to the main file.
     */
    string filePath;

    /** IOP path from the main (un)packed object. */
    string iopPath;
};

/** Module exporting interfaces provided by lib-common.
 */
module Core {
16384:
    Log log;
};
