{
	"name": "core",

	"objects": [
		{
			"name": "LogLevel",
			"fullName": "core.LogLevel",
			"type": "enum",
			"help": {
				"brief": "List of supported log levels."
			},
			"values": {
				"DEFAULT": -2,
				"INHERITS": -1,
				"EMERG": 0,
				"ALERT": 1,
				"CRIT": 2,
				"ERR": 3,
				"WARNING": 4,
				"NOTICE": 5,
				"INFO": 6,
				"DEBUG": 7,
				"TRACE": 8
			},
			"valuesHelp": {
				"DEFAULT": {
					"brief": "use default configuration"
				},
				"INHERITS": {
					"brief": "inherits the level of the parent logger"
				},
				"EMERG": {
					"brief": "system is unusable"
				},
				"ALERT": {
					"brief": "action must be taken immediately"
				},
				"CRIT": {
					"brief": "critical conditions"
				},
				"ERR": {
					"brief": "error conditions"
				},
				"WARNING": {
					"brief": "warning conditions"
				},
				"NOTICE": {
					"brief": "normal but significant condition"
				},
				"INFO": {
					"brief": "informational"
				},
				"DEBUG": {
					"brief": "debug-level messages"
				},
				"TRACE": {
					"brief": "trace-level messages"
				}
			}
		},
		{
			"name": "IopHttpMethod",
			"fullName": "core.IopHttpMethod",
			"type": "enum",
			"values": {
				"OPTIONS": 0,
				"GET": 1,
				"HEAD": 2,
				"POST": 3,
				"PUT": 4,
				"DELETE": 5,
				"TRACE": 6,
				"CONNECT": 7
			}
		},
		{
			"name": "LoggerConfiguration",
			"fullName": "core.LoggerConfiguration",
			"type": "struct",
			"help": {
				"brief": "Configuration of a specific logger."
			},
			"fields": {
				"fullName": {
					"type": "string",
					"help": {
						"brief": "Name of the logger to configure."
					},
					"constraints": {
						"minLength": 1
					}
				},
				"level": {
					"type": "core.LogLevel",
					"help": {
						"brief": "Logging level.",
						"details": "This will be the logging level for this logger and all inheriting loggers that were not explicitly configured."
					}
				},
				"forceAll": {
					"type": "boolean",
					"default": false,
					"help": {
						"brief": "Force the use of logging level for child loggers.",
						"details": "If this flag is set, the level of that logger is propagated to all child loggers that were not explicitly configured, even those that were not supposed to inherit from that level."
					}
				}
			}
		},
		{
			"name": "LogConfiguration",
			"fullName": "core.LogConfiguration",
			"type": "struct",
			"help": {
				"brief": "Configuration of the logging system."
			},
			"fields": {
				"rootLevel": {
					"type": "core.LogLevel",
					"default": -2,
					"help": {
						"brief": "Root logging level.",
						"details": "This will be the logging level for all the logger inherits from root logging level and that were not configured to another value separately.\nThe default configuration is to enable TRACE in development builds, and to enable only DEBUG in release builds."
					}
				},
				"forceAll": {
					"type": "boolean",
					"default": false,
					"help": {
						"brief": "Force the use of the root level.",
						"details": "If this flag is set, the root level is propagated to all logger that were not explicitly configured, even those that were not supposed to inherit from the root level."
					}
				},
				"specific": {
					"type": "core.LoggerConfiguration",
					"repeated": true,
					"help": {
						"brief": "Independent configuration of specific loggers.",
						"details": "This can be used to perform a fine-grained configuration of the logging level of specific code modules."
					}
				}
			}
		},
		{
			"name": "LogFileConfiguration",
			"fullName": "core.LogFileConfiguration",
			"type": "class",
			"isAbstract": false,
			"help": {
				"brief": "Configuration of a log_file_t.",
				"details": "This class defines how a log_file_t is opened."
			},
			"fields": {
				"maxSize": {
					"type": "int",
					"default": 536870912,
					"help": {
						"brief": "Log file max size before rotation (in bytes)"
					}
				},
				"maxTime": {
					"type": "ulong",
					"default": 86400,
					"help": {
						"brief": "Log file max age before rotation (in seconds)"
					}
				},
				"maxFiles": {
					"type": "int",
					"default": 0,
					"help": {
						"brief": "Maximum number of log files - <= 0 means no limit"
					}
				},
				"totalMaxSize": {
					"type": "long",
					"default": 1073741824,
					"help": {
						"brief": "Maximum total size of the log files (in bytes) <= 0 means no limit"
					}
				},
				"compress": {
					"type": "boolean",
					"default": true,
					"help": {
						"brief": "Activate log file compression"
					}
				}
			}
		},
		{
			"name": "Licence",
			"fullName": "core.Licence",
			"type": "class",
			"isAbstract": false,
			"help": {
				"brief": "Product licence.",
				"details": "This class provides the base for a product licence format."
			},
			"fields": {
				"expires": {
					"type": "string",
					"default": "31-dec-2035",
					"help": {
						"brief": "Expiration date of the licence."
					},
					"constraints": {
						"minLength": 11,
						"maxLength": 11,
						"pattern": "[a-zA-Z0-9\\-]*"
					}
				},
				"registeredTo": {
					"type": "string",
					"help": {
						"brief": "Licencee identification."
					}
				},
				"version": {
					"type": "string",
					"help": {
						"brief": "Version of the product licenced."
					}
				},
				"productionUse": {
					"type": "boolean",
					"help": {
						"brief": "If true, the licencee is allowed to use the product for production."
					}
				},
				"cpuSignatures": {
					"type": "long",
					"repeated": true,
					"help": {
						"brief": "Hardware limitation: CPU."
					}
				},
				"macAddresses": {
					"type": "string",
					"repeated": true,
					"help": {
						"brief": "Hardware limitation: MAC Address."
					}
				}
			}
		},
		{
			"name": "SignedLicence",
			"fullName": "core.SignedLicence",
			"type": "struct",
			"help": {
				"brief": "Signed licence."
			},
			"fields": {
				"licence": {
					"type": "core.Licence",
					"help": {
						"brief": "The licence structure."
					}
				},
				"signature": {
					"type": "string",
					"help": {
						"brief": "The signature of the previously defined licence."
					}
				}
			}
		},
		{
			"name": "HttpdCfg",
			"fullName": "core.HttpdCfg",
			"type": "struct",
			"fields": {
				"bindAddr": {
					"type": "string",
					"help": {
						"brief": "Address (host:port) to listen on"
					}
				},
				"outbufMaxSize": {
					"type": "uint",
					"default": 33554432,
					"help": {
						"brief": "Maximum size of the output buffer (in octets)"
					}
				},
				"pipelineDepth": {
					"type": "ushort",
					"default": 32,
					"help": {
						"brief": "Maximum number of pending incoming queries"
					}
				},
				"noactDelay": {
					"type": "uint",
					"default": 30000,
					"help": {
						"brief": "Maximum time of inactivity before connection closing (in ms)"
					}
				},
				"maxQueries": {
					"type": "uint",
					"default": 1024,
					"help": {
						"brief": "Maximum number of incoming queries handled into a connection life"
					}
				},
				"maxConnsIn": {
					"type": "uint",
					"default": 1000,
					"help": {
						"brief": "Maximum number of inbound connections"
					}
				},
				"onDataThreshold": {
					"type": "uint",
					"default": 16384,
					"help": {
						"brief": "Amount of data buffered by the body parser before flushing"
					}
				},
				"headerLineMax": {
					"type": "uint",
					"default": 1024,
					"help": {
						"brief": "Maximum line length in headers"
					}
				},
				"headerSizeMax": {
					"type": "uint",
					"default": 65536,
					"help": {
						"brief": "Maximum total size for headers"
					}
				}
			}
		},
		{
			"name": "HttpcCfg",
			"fullName": "core.HttpcCfg",
			"type": "struct",
			"fields": {
				"pipelineDepth": {
					"type": "ushort",
					"default": 32,
					"help": {
						"brief": "Maximum number of pending outgoing queries"
					}
				},
				"noactDelay": {
					"type": "uint",
					"default": 30000,
					"help": {
						"brief": "Maximum time of inactivity before connection closing (in ms)"
					}
				},
				"maxQueries": {
					"type": "uint",
					"default": 1024,
					"help": {
						"brief": "Maximum number of outgoing queries handled into a connection life"
					}
				},
				"onDataThreshold": {
					"type": "uint",
					"default": 16384,
					"help": {
						"brief": "Amount of data buffered by the body parser before flushing"
					}
				},
				"headerLineMax": {
					"type": "uint",
					"default": 1024,
					"help": {
						"brief": "Maximum line length in headers"
					}
				},
				"headerSizeMax": {
					"type": "uint",
					"default": 65536,
					"help": {
						"brief": "Maximum total size for headers"
					}
				}
			}
		},
		{
			"name": "setRootLevelArgs",
			"fullName": "core.Log.setRootLevelArgs",
			"type": "struct",
			"fields": {
				"level": {
					"type": "core.LogLevel"
				},
				"forceAll": {
					"type": "boolean",
					"default": false
				}
			}
		},
		{
			"name": "setRootLevelRes",
			"fullName": "core.Log.setRootLevelRes",
			"type": "struct",
			"fields": {
				"level": {
					"type": "core.LogLevel"
				}
			}
		},
		{
			"name": "resetRootLevelRes",
			"fullName": "core.Log.resetRootLevelRes",
			"type": "struct",
			"fields": {
				"level": {
					"type": "core.LogLevel"
				}
			}
		},
		{
			"name": "setLoggerLevelArgs",
			"fullName": "core.Log.setLoggerLevelArgs",
			"type": "struct",
			"fields": {
				"fullName": {
					"type": "string"
				},
				"level": {
					"type": "core.LogLevel"
				},
				"forceAll": {
					"type": "boolean",
					"default": false
				}
			}
		},
		{
			"name": "setLoggerLevelRes",
			"fullName": "core.Log.setLoggerLevelRes",
			"type": "struct",
			"fields": {
				"level": {
					"type": "core.LogLevel"
				}
			}
		},
		{
			"name": "resetLoggerLevelArgs",
			"fullName": "core.Log.resetLoggerLevelArgs",
			"type": "struct",
			"fields": {
				"fullName": {
					"type": "string"
				}
			}
		},
		{
			"name": "resetLoggerLevelRes",
			"fullName": "core.Log.resetLoggerLevelRes",
			"type": "struct",
			"fields": {
				"level": {
					"type": "core.LogLevel"
				}
			}
		}
	],

	"interfaces": [
		{
			"name": "Log",
			"fullName": "core.Log",
			"help": {
				"brief": "Interface providing the basis for configuring the logging system."
			},
			"rpcs": {
				"setRootLevel": {
					"in": "core.Log.setRootLevelArgs",
					"out": "core.Log.setRootLevelRes"
				},
				"resetRootLevel": {
					"out": "core.Log.resetRootLevelRes"
				},
				"setLoggerLevel": {
					"in": "core.Log.setLoggerLevelArgs",
					"out": "core.Log.setLoggerLevelRes"
				},
				"resetLoggerLevel": {
					"in": "core.Log.resetLoggerLevelArgs",
					"out": "core.Log.resetLoggerLevelRes"
				}
			}
		}
	],

	"modules": [
		{
			"name": "Core",
			"fullName": "core.Core",
			"help": {
				"brief": "Module exporting interfaces provided by lib-common."
			},
			"interfaces": {
				"log": {
					"type": "core.Log"
				}
			}
		}
	]
}
