/***** THIS FILE IS AUTOGENERATED DO NOT MODIFY DIRECTLY ! *****/
#ifndef IOP_HEADER_GUARD_ic_TYPES_H
#define IOP_HEADER_GUARD_ic_TYPES_H

#include "ic-tdef.iop.h"

#if __has_feature(nullability)
#pragma GCC diagnostic push
#pragma GCC diagnostic error "-Wnullability-completeness"
#endif

EXPORT iop_enum_t const ic__ic_priority__e;
EXPORT iop_enum_t const * const nonnull  ic__ic_priority__ep;
IOP_ENUM(ic__ic_priority);

struct ic__tracer__t {
    uint64_t token;
    uint64_t epoch;
};
EXPORT iop_struct_t const ic__tracer__s;
EXPORT iop_struct_t const * const nonnull  ic__tracer__sp;
IOP_GENERIC(ic__tracer);

struct ic__simple_hdr__t {
    lstr_t           login;
    lstr_t           password;
    lstr_t           kind;
    int32_t  payload;
    lstr_t           host;
    lstr_t           group;
};
EXPORT iop_struct_t const ic__simple_hdr__s;
EXPORT iop_struct_t const * const nonnull  ic__simple_hdr__sp;
IOP_GENERIC(ic__simple_hdr);

struct ic__route__t {
    const iop_struct_t *nonnull __vptr;
};
EXPORT iop_struct_t const ic__route__s;
EXPORT iop_struct_t const * const nonnull  ic__route__sp;
IOP_CLASS(ic__route);

#define ic__route__class_id  0

struct ic__routing_hdr__t {
    struct ic__route__t *nonnull route;
    int32_t  ttl;
    ic__ic_priority__t priority;
    struct ic__tracer__t *nullable tracer;
    struct ic__hdr__t *nullable original_hdr;
};
EXPORT iop_struct_t const ic__routing_hdr__s;
EXPORT iop_struct_t const * const nonnull  ic__routing_hdr__sp;
IOP_GENERIC(ic__routing_hdr);

/*----- XXX private data, do not use directly -{{{-*/
typedef uint16_t ic__hdr__tag_t;
#define ic__hdr__simple__ft 1
#define ic__hdr__routing__ft 2
/*-}}}-*/
struct ic__hdr__t {
    uint16_t iop_tag;
    union {
        struct ic__simple_hdr__t simple;
        struct ic__routing_hdr__t routing;
    };
};
EXPORT iop_struct_t const ic__hdr__s;
EXPORT iop_struct_t const * const nonnull  ic__hdr__sp;
IOP_GENERIC(ic__hdr);
#define ic__hdr__get(u, field)       IOP_UNION_GET(ic__hdr, u, field)
#if __has_feature(nullability)
#pragma GCC diagnostic pop
#endif

#endif
