##########################################################################
#                                                                        #
#  Copyright (C) 2004-2018 INTERSEC SA                                   #
#                                                                        #
#  Should you receive a copy of this source code, you must check you     #
#  have a proper, written authorization of INTERSEC to hold it. If you   #
#  don't have such an authorization, you must DELETE all source code     #
#  files in your possession, and inform INTERSEC of the fact you obtain  #
#  these files. Should you not comply to these terms, you can be         #
#  prosecuted in the extent permitted by applicable law.                 #
#                                                                        #
##########################################################################

from waflib.Task import Task
from waflib.TaskGen import extension

def build(ctx):
    ctx.set_group('tools_generation')

    ctx.stlib(target='libiopc', source=[
        'iopc.fc',
        'iopc-dso.c',
        'iopc-lex.l',
        'iopc-parser.c',
        'iopc-pretty.c',
        'iopc-typer.blk',
        'iopctokens.c',
        'iopc-write.c',

        'iopc-lang-c.blk',
        'iopc-lang-json.blk',
        'iopc-lang-typescript.c',
    ], use='libcommon', includes='.')

    iopc = ctx.program(target='iopc', source='iopc.c',
                       use='libcommon libiopc',
                       lib=['pthread', 'dl'], install_path=None)

    iopc.post()
    ctx.env.IOPC_TASK = iopc.link_task
    ctx.env.IOPC = iopc.link_task.outputs[0].abspath()

    ctx.set_group('code_compiling')

    ctx.stlib(target='libiopsq', source=[
        'iopc-iopsq.c',
        'iopsq.iop',
    ], use='libcommon', includes='.')

    ctx.program(target='zchk', source='zchk.c',
                includes='.',
                use='libcommon libiopsq libiopc tstiop',
                lib=['pthread', 'dl'])

# {{{ IOP processor

class Iop2c(Task):
    # TODO: handle depfiles
    # TODO: handle class ids range
    run_str = ('${IOPC} --Wextra -l c ' +
               '-I .. ' + # TODO: properly handle include path
               '-o ${TGT[0].parent.abspath()} ' +
               '${SRC[0].abspath()}')
    color   = 'BLUE'
    ext_out = ['.h', '.c']


@extension('.iop')
def process_iop(self, node):
    c_node = node.change_ext('.iop.c')
    h_node = node.change_ext('.iop.h')
    tdef_h_node = node.change_ext('-tdef.iop.h')
    t_h_node = node.change_ext('-t.iop.h')

    task = self.create_task('Iop2c', node, [c_node, h_node, tdef_h_node, t_h_node])
    task.set_run_after(self.env.IOPC_TASK)
    self.bld.add_to_group(task, 'code_generation')
    self.source.append(c_node)

# }}}
